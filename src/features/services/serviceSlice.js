import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { getServices, getServicesAsync } from './serviceAPI';

const initialState = {
  items: [],
  isLoading: false,
  error: null
};

export const fetchServicesAsync = createAsyncThunk(
  'counter/fetchCount',
  async (amount) => {
    const response = await getServicesAsync();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const serviceSlice = createSlice({
  name: 'services',
  initialState,
  reducers: {
    fetchServices: (state) => {
      state.items = getServices();
    },
  },

  // actions generated by createAsyncThunk
  extraReducers: (builder) => {
    builder
      .addCase(fetchServicesAsync.pending, (state) => {
        state.isLoading = true;
      })
      .addCase(fetchServicesAsync.fulfilled, (state, action) => {
        state.isLoading = false;
        state.items = action.payload;
      });
  },
});

export const { fetchServices } = serviceSlice.actions;

export const selectServices = (state) => state.services;

export default serviceSlice.reducer;
